import numpy as np
from tensorflow import keras
from tensorflow.keras import layers
import tensorflow as tf


class ReluModel():

    def __init__(self, n_input, n_outputs, layer1_neurons, layer2_neurons):

        self.inputs = keras.Input(shape=(n_input), name="input_layer")
        self.dense1 = layers.Dense(layer1_neurons, activation="relu", name="dense_1")(self.inputs)
        self.dense2 = layers.Dense(layer2_neurons, activation="relu", name="dense_2")(self.dense1)
        self.outputs = layers.Dense(n_outputs, name="predictions")(self.dense2)
        self.model = keras.Model(inputs=self.inputs, outputs=self.outputs)
    

    def compile(self):

        self.model.compile(
            optimizer = keras.optimizers.Adam(),  

            loss = keras.losses.MeanAbsoluteError(),

            metrics = [keras.metrics.MeanAbsoluteError()],
            )
    

    def train(self, X_train, y_train, batch_s, epo_s):
        
        self.model.fit(
            X_train,
            y_train,
            batch_size = batch_s,
            epochs = epo_s,
        )
    

    def predict(self, test_arr, test_func):

        predictions = self.model.predict(test_arr)
        abs_vals = []

        for i in range(len(predictions)):
            print(test_arr[i], "  prediction: ", predictions[i], "  Actual value: ", test_func[i],"  Accuracy: ", abs(predictions[i]-test_func[i]))
            abs_vals.append(abs(predictions[i] - test_func[i]))

        return abs_vals


def avg_accuracy(absolute_values):
    sum = 0
    for i in range(len(absolute_values)):
        sum = sum + absolute_values[i]

    return sum/len(absolute_values)


def main():

    # train data avg. monthly:  [0]-> avg. dew point, [1]-> avg.wind, [2]-> avg. sea level pressure, [3]-> month
    X = [[24.09, 7.08, 29.59, 1], [29.89, 6.95, 29.55, 2], [42.83, 9.5, 29.32, 3], [46.22, 7.62, 29.19, 4], [51.55, 5.79, 29.31, 5], [55.2, 7.73, 29.48, 6], [57.32, 9.53, 29.26, 7], [59.84, 5.34, 29.38, 8], [52.12, 5.86, 29.4, 9], [49.4, 5.11, 29.52, 10], [43.29, 6.03, 29.28, 11], [31.12, 5.08, 29.32, 12], [28.5, 5.2, 29.51, 1], [30.69, 8.02, 29.44, 2], [39.21, 7.46, 29.16, 3], [42.12, 7.86, 29.35, 4], [53.3, 7.25, 29.36, 5], [56.11, 8.84, 29.25, 6], [63.07, 6.93, 29.31, 7], [62.86, 5.73, 29.48, 8], [54.16, 7, 29.26, 9], [52.46, 4.88, 29.48, 10], [29.62, 7.29, 29.45, 11], [19.74, 5.21, 29.51, 12], [28.83, 5.36, 29.72, 1], [32.58, 7.29, 29.5, 2], [33.39, 7.91, 29.43, 3], [42.15, 6.7, 29.34, 4], [56.37, 7.31, 29.29, 5], [59.68, 7.35, 29.39, 6], [63.24, 7.2, 29.35, 7], [63.32, 6.39, 29.31, 8], [53.87, 5.77, 29.36, 9], [45.51, 7.01, 29.38, 10], [41.55, 6.21, 29.34, 11], [26.45, 5.11, 29.58, 12], [24.19, 4.82, 29.46, 1], [20.2, 4.86, 29.62, 2], [31.31, 5.79, 29.62, 3], [40.52, 8.58, 29.45, 4], [57.07, 6.49, 29.52, 5], [62.2, 6.37, 29.38, 6], [63.07, 7.89, 29.41, 7], [63.07, 5.85, 29.42, 8], [53.52, 6.5, 29.57, 9], [42.48, 6.88, 29.41, 10], [40.43, 5.91, 29.63, 11], [27.51, 6.73, 29.6, 12], [21.78, 6.17, 29.34, 1], [26.4, 8.5, 29.51, 2], [32.12, 7.13, 29.62, 3], [43.33, 6.58, 29.43, 4], [48.61, 7.04, 29.33, 5], [55.81, 5.96, 29.5, 6], [58.88, 7.12, 29.43, 7], [58.18, 6.33, 29.4, 8], [50.42, 5.58, 29.59, 9], [46.51, 5.45, 29.38, 10], [35.67, 8.44, 29.54, 11], [27.27, 4.37, 29.62, 12], [23.36, 7.43, 29.58, 1], [19.17, 5.75, 29.46, 2], [27.38, 8.04, 29.48, 3], [39.78, 6.58, 29.38, 4], [49.17, 6.62, 29.45, 5], [53.42, 6.69, 29.51, 6], [59.6, 6.41, 29.38, 7], [56.97, 6.34, 29.42, 8], [52.54, 5.47, 29.56, 9], [42.6, 5.83, 29.69, 10], [30.39, 5.32, 29.61, 11], [25.38, 8.34, 29.51, 12], [20.43, 5.68, 29.81, 1], [23.84, 5.15, 29.42, 2], [28.71, 6.19, 29.26, 3], [41.68, 6.64, 29.39, 4], [49.29, 6.58, 29.46, 5], [55.94, 5.51, 29.53, 6], [60.32, 4.16, 29.47, 7], [56.64, 7.68, 29.33, 8], [53.03, 6.76, 29.54, 9], [43.63, 6.14, 29.58, 10], [37.99, 8.51, 29.6, 11], [29.45, 4.82, 29.86, 12], [29.27, 10.05, 29.54, 1], [30.79, 8.01, 29.44, 2], [33.18, 8.63, 29.49, 3], [31.83, 7.02, 29.6, 4], [49.94, 8.71, 29.38, 5], [56.2, 7.3, 29.41, 6], [52.45, 9.08, 29.41, 7], [57.11, 6.97, 29.44, 8], [47.77, 7.67, 29.54, 9], [41.43, 6.17, 29.65, 10], [29.99, 8.76, 29.54, 11], [26.68, 4.83, 29.76, 12], [26.23, 7.6, 29.71, 1], [26.43, 7.62, 29.82, 2], [32.34, 10.4, 29.23, 3], [40.83, 8.16, 29.34, 4], [49.72, 6.6, 29.46, 5], [58.38, 6.56, 29.47, 6], [58.06, 8.08, 29.44, 7], [55.89, 6.78, 29.47, 8], [49.49, 5.65, 29.53, 9], [46.9, 5.49, 29.6, 10], [37.19, 7.55, 29.55, 11], [30.14, 8.4, 29.63, 12], [23.55, 5.31, 29.55, 1], [27.2, 9.41, 29.4, 2], [30.33, 10.8, 29.37, 3], [37.04, 7.02, 29.5, 4], [45.16, 8.14, 29.56, 5], [54.31, 7.6, 29.43, 6], [57.38, 7.86, 29.46, 7], [56.22, 6.18, 29.55, 8], [50.39, 6.54, 29.61, 9], [41.74, 7.66, 29.52, 10], [40.28, 6.66, 29.45, 11], [29.74, 6.73, 29.36, 12], [24.18, 6.6, 29.49, 1], [27.5, 7.71, 29.27, 2], [28.86, 9.57, 29.54, 3], [40.79, 7.31, 29.55, 4], [54.11, 8.3, 29.33, 5], [58.57, 7.28, 29.36, 6], [61.45, 6.99, 29.47, 7], [59.77, 6.68, 29.46, 8], [52.29, 7.62, 29.5, 9], [38.1, 6.41, 29.58, 10], [39.09, 7.42, 29.31, 11], [22.56, 7.88, 29.4, 12], [26.55, 5.44, 29.65, 1], [23.78, 6.51, 29.63, 2], [28.8, 6.71, 29.7, 3], [35.67, 8.85, 29.52, 4], [46.24, 6.94, 29.57, 5], [55.69, 8.16, 29.47, 6], [56.48, 9.21, 29.36, 7], [56.75, 6.98, 29.5, 8], [50.59, 6.75, 29.56, 9], [38.7, 7.27, 29.69, 10], [27.11, 5.19, 29.83, 11], [27.16, 6.64, 29.55, 12], [22.95, 9.42, 29.59, 1], [15.39, 8.1, 29.7, 2], [25.77, 8.67, 29.72, 3], [37.75, 8.77, 29.26, 4], [46.26, 7.8, 29.46, 5], [56.04, 7.74, 29.45, 6], [57.84, 8.03, 29.47, 7], [52.74, 6.69, 29.53, 8], [50.28, 7.05, 29.52, 9], [43.56, 6.73, 29.49, 10], [40.03, 7.01, 29.56, 11], [24.09, 6.45, 29.43, 12], [25.49, 7.59, 29.43, 1], [29.62, 7.83, 29.42, 2], [30.34, 8.91, 29.31, 3], [40.71, 7.19, 29.49, 4], [51.67, 8.26, 29.36, 5], [58.1, 7.24, 29.46, 6], [53.9, 7.36, 29.55, 7], [54.09, 6.32, 29.53, 8], [48.6, 8.48, 29.49, 9], [44.82, 6.49, 29.63, 10], [40.25, 7.36, 29.51, 11], [26.71, 7.16, 29.79, 12], [30.53, 6.97, 29.48, 1], [31.9, 6.69, 29.5, 2], [34.2, 8.43, 29.52, 3], [42.74, 8.41, 29.41, 4], [49.73, 8.16, 29.43, 5], [50.19, 7.08, 29.49, 6], [59.12, 7.1, 29.41, 7], [58.16, 6.58, 29.45, 8], [55.78, 6.53, 29.54, 9], [48.7, 5.73, 29.61, 10], [41.65, 6.41, 29.55, 11], [31.13, 7.74, 29.6, 12], [30.67, 7.92, 29.53, 1], [29.23, 7.11, 29.53, 2], [31.77, 8.37, 29.63, 3], [33.5, 9.37, 29.55, 4], [49.72, 7.59, 29.47, 5], [54.31, 6.85, 29.55, 6], [57.09, 7.15, 29.5, 7], [59.63, 5.76, 29.52, 8], [53.31, 8.22, 29.54, 9], [46.3, 6.21, 29.62, 10], [37.6, 6.44, 29.61, 11], [34.67, 5.38, 29.95, 12], [25.34, 5.81, 29.54, 1], [37.97, 8.9, 29.45, 2], [35.2, 7.51, 29.44, 3], [42.16, 8.45, 29.39, 4], [50.15, 7.42, 29.42, 5], [57.75, 6.25, 29.44, 6], [58.51, 7.17, 29.51, 7], [57.58, 6.49, 29.59, 8], [54.19, 4.49, 29.58, 9], [44.03, 7.29, 29.64, 10], [35.35, 7.58, 29.59, 11], [25.81, 7.35, 29.92, 12], [16.23, 6.27, 29.76, 1], [32.04, 5.98, 29.65, 2], [36.09, 7.81, 29.54, 3], [38.48, 9.66, 29.52, 4], [50.06, 7.27, 29.5, 5], [55.32, 8.26, 29.46, 6], [57.61, 7.67, 29.47, 7], [57.97, 6.76, 29.54, 8], [51.41, 7.59, 29.5, 9], [45.44, 7.7, 29.6, 10], [37.66, 7.14, 29.54, 11], [31.51, 9.04, 29.51, 12], [33.58, 6.8, 29.57, 1], [28.49, 6.54, 29.51, 2], [32.77, 7.06, 29.27, 3], [47.31, 8.38, 29.49, 4], [54.28, 7.05, 29.48, 5], [60.55, 7.38, 29.42, 6], [60.55, 7.43, 29.42, 7], [62.15, 5.69, 29.52, 8], [53.67, 6.14, 29.63, 9], [46.89, 6.77, 29.61, 10], [38.91, 6.58, 29.68, 11], [29.79, 7.37, 29.64, 12], [26.68, 8.24, 29.39, 1], [30.93, 7.59, 29.72, 2], [33.65, 9.04, 29.57, 3], [40.79, 8.82, 29.47, 4], [51.32, 7.85, 29.38, 5], [63.25, 6.85, 29.52, 6], [57.97, 7.05, 29.43, 7], [62.23, 5.9, 29.52, 8], [52.31, 6.16, 29.58, 9], [47.49, 5.89, 29.55, 10], [44.29, 7.67, 29.37, 11], [33.41, 7.8, 29.53, 12], [27.38, 5.18, 29.82, 1], [31.3, 10.78, 29.53, 2], [30.3, 7.82, 29.55, 3], [30.5, 6.95, 29.56, 4], [42.29, 8.46, 29.51, 5], [58.44, 7.27, 29.31, 6], [58.16, 5.8, 29.46, 7], [59.41, 6.4, 29.44, 8], [51.72, 6.29, 29.53, 9], [47.7, 6.72, 29.46, 10]]

    # train data avg. temperature monthly  
    y = [33.58, 45.36, 56, 67.17, 75.97, 79.91, 77.61, 81.5, 70.17, 66.87, 54.4, 40.39, 38.35, 46.64, 53.45, 66.13, 75.61, 74.5, 80.9, 83.55, 66.73, 66.61, 44.6, 30.71, 39.87, 48.39, 56.19, 61.97, 76.77, 80.2, 85, 79.45, 69.67, 58.77, 51.9, 34.71, 34.23, 33.03, 51.48, 60.9, 79.26, 84.53, 82.52, 87.48, 73.47, 55.16, 50.37, 39.06, 33.1, 39.86, 45.55, 58.63, 65.42, 72.6, 78.03, 78.81, 68.53, 59.32, 46.93, 36.97, 37.19, 32.32, 46.13, 60.2, 69.97, 74.43, 78.39, 72.48, 70.43, 61.29, 45.57, 38.06, 32.23, 34.36, 44.71, 61.9, 66.23, 74.93, 83.41, 73.55, 74.5, 66.42, 51, 39.65, 48.1, 46.79, 55.52, 67.13, 74.94, 82.63, 86.1, 82.94, 67.23, 59.87, 44.63, 33.97, 38.81, 48.52, 51.68, 61.93, 73.16, 79.23, 79.71, 81.42, 68.9, 63.74, 50.1, 41.39, 34.03, 38.71, 49.65, 71.1, 73.55, 75.4, 83.87, 83, 77.33, 59.71, 49.9, 38.35, 32.1, 38.14, 51.68, 61.7, 68.77, 75.33, 83.23, 78.39, 66.07, 55.77, 53.03, 33.16, 36.32, 38.14, 52.74, 65.67, 72.87, 79, 78.74, 83.94, 80.03, 60.77, 44.7, 40.39, 39.87, 33.55, 57.42, 64.2, 74.42, 80.4, 86.19, 86.26, 77, 61.32, 51.57, 33.77, 35.97, 40.39, 45.19, 64.13, 70.74, 77.83, 84.94, 84.58, 68, 64.55, 50.77, 40.06, 41.19, 45.64, 58.87, 64.33, 69.13, 78.27, 81.94, 77.13, 70.93, 62.29, 50.03, 42.35, 41.26, 43.75, 53.97, 63.33, 71.55, 79.6, 86.29, 86.35, 74.2, 58.58, 54.33, 40.65, 35.19, 49.62, 53.58, 65.53, 70.94, 79.97, 82.03, 79.52, 76.87, 56.23, 48.27, 37.52, 28.97, 42.86, 59.1, 61.1, 72.81, 83.17, 82.9, 85.29, 69.4, 62.26, 48.7, 41.81, 42.61, 37.07, 45.42, 72.03, 77.52, 78.97, 82.48, 86.06, 74.6, 66.97, 51.57, 39.06, 36, 48.79, 58, 65.33, 65.35, 83.93, 82.19, 85.03, 73.3, 67.03, 54.47, 43.35, 36.35, 51.1, 54.58, 66.7, 68.9, 77.6, 81.13, 84.55, 76.33, 60.81]

    # creating np arrays from the data
    X_train = np.array(X)
    y_train = np.array(y)

    # test data with monthly avarage data
    X_test = np.array([[30.67, 7.92, 29.53, 1], [29.23, 7.11, 29.53, 2], [31.77, 8.37, 29.63, 3], [33.5, 9.37, 29.55, 4], [49.72, 7.59, 29.47, 5], [54.31, 6.85, 29.55, 6], [57.09, 7.15, 29.5, 7], [59.63, 5.76, 29.52, 8], [53.31, 8.22, 29.54, 9], [46.3, 6.21, 29.62, 10], [37.6, 6.44, 29.61, 11], [34.67, 5.38, 29.95, 12], [25.34, 5.81, 29.54, 1], [37.97, 8.9, 29.45, 2], [35.2, 7.51, 29.44, 3], [42.16, 8.45, 29.39, 4], [50.15, 7.42, 29.42, 5], [57.75, 6.25, 29.44, 6], [58.51, 7.17, 29.51, 7], [57.58, 6.49, 29.59, 8], [54.19, 4.49, 29.58, 9], [44.03, 7.29, 29.64, 10], [35.35, 7.58, 29.59, 11], [25.81, 7.35, 29.92, 12], [16.23, 6.27, 29.76, 1], [32.04, 5.98, 29.65, 2], [36.09, 7.81, 29.54, 3], [38.48, 9.66, 29.52, 4], [50.06, 7.27, 29.5, 5], [55.32, 8.26, 29.46, 6], [57.61, 7.67, 29.47, 7], [57.97, 6.76, 29.54, 8], [51.41, 7.59, 29.5, 9], [45.44, 7.7, 29.6, 10], [37.66, 7.14, 29.54, 11], [31.51, 9.04, 29.51, 12], [33.58, 6.8, 29.57, 1], [28.49, 6.54, 29.51, 2], [32.77, 7.06, 29.27, 3], [47.31, 8.38, 29.49, 4], [54.28, 7.05, 29.48, 5], [60.55, 7.38, 29.42, 6], [60.55, 7.43, 29.42, 7], [62.15, 5.69, 29.52, 8], [53.67, 6.14, 29.63, 9], [46.89, 6.77, 29.61, 10], [38.91, 6.58, 29.68, 11], [29.79, 7.37, 29.64, 12], [26.68, 8.24, 29.39, 1], [30.93, 7.59, 29.72, 2]])
    y_test = np.array([41.26, 43.75, 53.97, 63.33, 71.55, 79.6, 86.29, 86.35, 74.2, 58.58, 54.33, 40.65, 35.19, 49.62, 53.58, 65.53, 70.94, 79.97, 82.03, 79.52, 76.87, 56.23, 48.27, 37.52, 28.97, 42.86, 59.1, 61.1, 72.81, 83.17, 82.9, 85.29, 69.4, 62.26, 48.7, 41.81, 42.61, 37.07, 45.42, 72.03, 77.52, 78.97, 82.48, 86.06, 74.6, 66.97, 51.57, 39.06, 36, 48.79])

    # creating the NN
    nn_network = ReluModel(4,1,128,128)
    nn_network.compile()
    nn_network.train(X_train, y_train, 32, 100)
    print(avg_accuracy(nn_network.predict(X_test, y_test)))

    #individual tests with random daily data
    individual_test = np.array([[31.76, 6.52, 29.33, 2], [62.49, 6.36, 29.41, 6], [38.2, 5.29, 29.63, 10]])
    individual_func = np.array([36.85, 79.93, 46.64])
    nn_network.predict(individual_test, individual_func)

if __name__ == "__main__":
    main()

